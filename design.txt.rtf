{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 I created Scrabble for my term project, where the user is able to play a game against the computer. I mainly used Tkinter for this project and created and algorithm to make my AI work, which essentially created all possible words from the hand its given and the words on the board and places the best possible word (in terms of points) down. The computer is able to see if the permutations of letters its created are words by checking if it is in the text file of 100,000 words included. PyEnchant is used as a dictionary on the player side, ensuring that every word the player puts down is legal. \
\
I mainly modeled my project after many of the app games of Scrabble you can find such as Words With Friends or the traditional board game of Scrabble that is played. Because of this, I had popular features such as Pass and Swap which allow for the player to skip their turn or get a new set of letters (and skip their turn). Additionally, my User Interface follows suit, having an initial Welcome Page that allows users to see the Rules of the game and the Help page. Once they begin playing the game, users can access the Help page with the press of the space bar. The actual game page is fairly intuitive with the full board displayed on one side, the player letters displayed on the other side and scores displayed at the bottom. The button \'93Make Move\'94 is large and colored, making it easy to understand its function, as are the \'93Pass\'94 and \'93Swap\'94 buttons. When either the tiles are used up or one of the players gets to 150 points, the game is over and a splash screen comes up, detailing who has won. }